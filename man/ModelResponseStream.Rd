% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/responses.R
\name{ModelResponseStream}
\alias{ModelResponseStream}
\title{ModelResponseStream R6 Class}
\description{
ModelResponseStream R6 Class

ModelResponseStream R6 Class
}
\section{Super classes}{
\code{openaiapi::Utils} -> \code{\link[openaiapi:ModelResponse]{openaiapi::ModelResponse}} -> \code{ModelResponseStream}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ModelResponseStream-new}{\code{ModelResponseStream$new()}}
\item \href{#method-ModelResponseStream-stream}{\code{ModelResponseStream$stream()}}
\item \href{#method-ModelResponseStream-generator}{\code{ModelResponseStream$generator()}}
\item \href{#method-ModelResponseStream-async_generator}{\code{ModelResponseStream$async_generator()}}
\item \href{#method-ModelResponseStream-clone}{\code{ModelResponseStream$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="await"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-await'><code>openaiapi::ModelResponse$await()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="delete"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-delete'><code>openaiapi::ModelResponse$delete()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="do_tool_calls"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-do_tool_calls'><code>openaiapi::ModelResponse$do_tool_calls()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="get"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-get'><code>openaiapi::ModelResponse$get()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="list_input_items"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-list_input_items'><code>openaiapi::ModelResponse$list_input_items()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="respond"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-respond'><code>openaiapi::ModelResponse$respond()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="submit_tool_outputs"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-submit_tool_outputs'><code>openaiapi::ModelResponse$submit_tool_outputs()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="ModelResponse" data-id="wait"><a href='../../openaiapi/html/ModelResponse.html#method-ModelResponse-wait'><code>openaiapi::ModelResponse$wait()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelResponseStream-new"></a>}}
\if{latex}{\out{\hypertarget{method-ModelResponseStream-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{ModelResponseStream} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelResponseStream$new(stream_reader = NULL, init = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{stream_reader}}{StreamReader. The stream reader object.}

\item{\code{init}}{List. The initial response object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelResponseStream-stream"></a>}}
\if{latex}{\out{\hypertarget{method-ModelResponseStream-stream}{}}}
\subsection{Method \code{stream()}}{
Stream the model response.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelResponseStream$stream(
  on_event = function(event) {
 },
  on_output_text = function(output_text) {
 },
  on_output_text_delta = function(data) {
 },
  env = parent.frame()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{on_event}}{Function. Callback function to handle all events.
The function should accept a single argument, \code{event}, which is a list
containing the event \code{type} and \code{data}.}

\item{\code{on_output_text}}{Function. Callback function to handle event that change output text. The function should accept a single argument
containing the output text string.}

\item{\code{on_output_text_delta}}{Function. Callback function to handle output
text delta events. The function should accept a single argument
containing the delta event data.}

\item{\code{env}}{Environment. The environment in which to evaluate the tool calls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelResponseStream-generator"></a>}}
\if{latex}{\out{\hypertarget{method-ModelResponseStream-generator}{}}}
\subsection{Method \code{generator()}}{
Get the generator function for the stream.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelResponseStream$generator(
  on_event = function(event) {
 },
  on_output_text = function(output_text) {
 },
  on_output_text_delta = function(data) {
 },
  env = parent.frame()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{on_event}}{Function. Callback function to handle all events.
The function should accept a single argument, \code{event}, which is a list
containing the event \code{type} and \code{data}.}

\item{\code{on_output_text}}{Function. Callback function to handle event that change output text. The function should accept a single argument
containing the output text string.}

\item{\code{on_output_text_delta}}{Function. Callback function to handle output
text delta events. The function should accept a single argument
containing the delta event data.}

\item{\code{env}}{Environment. The environment in which to evaluate the tool calls.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A coro package generator function.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelResponseStream-async_generator"></a>}}
\if{latex}{\out{\hypertarget{method-ModelResponseStream-async_generator}{}}}
\subsection{Method \code{async_generator()}}{
Get the async generator function for the stream.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelResponseStream$async_generator(
  on_event = function(event) {
 },
  on_output_text = function(output_text) {
 },
  on_output_text_delta = function(data) {
 },
  env = parent.frame()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{on_event}}{Function. Callback function to handle all events.
The function should accept a single argument, \code{event}, which is a list
containing the event \code{type} and \code{data}.}

\item{\code{on_output_text}}{Function. Callback function to handle event that change output text. The function should accept a single argument
containing the output text string.}

\item{\code{on_output_text_delta}}{Function. Callback function to handle output
text delta events. The function should accept a single argument
containing the delta event data.}

\item{\code{env}}{Environment. The environment in which to evaluate the tool calls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ModelResponseStream-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ModelResponseStream-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelResponseStream$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
