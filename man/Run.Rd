% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{Run}
\alias{Run}
\alias{RunStream}
\title{Run R6 class}
\description{
Run R6 class

Run R6 class

RunStream R6 class

RunStream R6 class
}
\section{Super class}{
\code{openaiapi::Utils} -> \code{Run}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{Run ID.}

\item{\code{created_at}}{Time the run was created.}

\item{\code{thread_id}}{Thread ID.}

\item{\code{assistant_id}}{Assistant ID.}

\item{\code{status}}{Run status.}

\item{\code{required_action}}{Required action.}

\item{\code{last_error}}{Last error.}

\item{\code{started_at}}{Time the run was started.}

\item{\code{expires_at}}{Time the run expires.}

\item{\code{cancelled_at}}{Time the run was cancelled.}

\item{\code{failed_at}}{Time the run failed.}

\item{\code{completed_at}}{Time the run was completed.}

\item{\code{incomplete_details}}{Incomplete details.}

\item{\code{model}}{Model.}

\item{\code{instructions}}{Instructions.}

\item{\code{tools}}{Tools.}

\item{\code{metadata}}{Metadata.}

\item{\code{usage}}{Usage.}

\item{\code{temperature}}{Temperature.}

\item{\code{top_p}}{Top p.}

\item{\code{max_prompt_tokens}}{Maximum prompt tokens.}

\item{\code{max_completion_tokens}}{Maximum completion tokens.}

\item{\code{truncation_strategy}}{Truncation strategy.}

\item{\code{tool_choice}}{Tool choice.}

\item{\code{response_format}}{Response format.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Run-new}{\code{Run$new()}}
\item \href{#method-Run-list_steps}{\code{Run$list_steps()}}
\item \href{#method-Run-retrieve}{\code{Run$retrieve()}}
\item \href{#method-Run-retrieve_status}{\code{Run$retrieve_status()}}
\item \href{#method-Run-modify}{\code{Run$modify()}}
\item \href{#method-Run-cancel}{\code{Run$cancel()}}
\item \href{#method-Run-submit_tool_outputs}{\code{Run$submit_tool_outputs()}}
\item \href{#method-Run-wait}{\code{Run$wait()}}
\item \href{#method-Run-await}{\code{Run$await()}}
\item \href{#method-Run-do_tool_calls}{\code{Run$do_tool_calls()}}
\item \href{#method-Run-thread}{\code{Run$thread()}}
\item \href{#method-Run-assistant}{\code{Run$assistant()}}
\item \href{#method-Run-clone}{\code{Run$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Utils" data-id="store_response"><a href='../../openaiapi/html/Utils.html#method-Utils-store_response'><code>openaiapi::Utils$store_response()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-new"></a>}}
\if{latex}{\out{\hypertarget{method-Run-new}{}}}
\subsection{Method \code{new()}}{
Initialize a Run object. If \code{thread_id} and \code{run_id} are provided, the Run object is initialized with the corresponding run. If \code{thread_id} and \code{assistant_id} are provided, a new run is created.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$new(
  thread_id = NULL,
  run_id = NULL,
  assistant_id = NULL,
  ...,
  resp = NULL,
  .async = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thread_id}}{Thread ID or Thread object}

\item{\code{run_id}}{Run ID.}

\item{\code{assistant_id}}{Assistant ID or Assistant object.}

\item{\code{...}}{Additional arguments passed to the API function.}

\item{\code{resp}}{Response object.}

\item{\code{.async}}{Logical. If TRUE, the API call will be asynchronous.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-list_steps"></a>}}
\if{latex}{\out{\hypertarget{method-Run-list_steps}{}}}
\subsection{Method \code{list_steps()}}{
Retrieve the run. The \code{...} argument is passed to \verb{oai_list_run steps()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$list_steps(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional arguments passed to the API function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list_steps()} returns a list of \code{RunStep} objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-retrieve"></a>}}
\if{latex}{\out{\hypertarget{method-Run-retrieve}{}}}
\subsection{Method \code{retrieve()}}{
Retrieve the run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$retrieve()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-retrieve_status"></a>}}
\if{latex}{\out{\hypertarget{method-Run-retrieve_status}{}}}
\subsection{Method \code{retrieve_status()}}{
Retrieve the up-to-date status of the run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$retrieve_status()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-modify"></a>}}
\if{latex}{\out{\hypertarget{method-Run-modify}{}}}
\subsection{Method \code{modify()}}{
Modify the metadata of the run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$modify(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional arguments passed to the API function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-cancel"></a>}}
\if{latex}{\out{\hypertarget{method-Run-cancel}{}}}
\subsection{Method \code{cancel()}}{
Cancel the run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$cancel()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-submit_tool_outputs"></a>}}
\if{latex}{\out{\hypertarget{method-Run-submit_tool_outputs}{}}}
\subsection{Method \code{submit_tool_outputs()}}{
Submit tool outputs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$submit_tool_outputs(tool_outputs, stream = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tool_outputs}}{Tool outputs.}

\item{\code{stream}}{Logical. If TRUE, the function will return a RunStream object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-wait"></a>}}
\if{latex}{\out{\hypertarget{method-Run-wait}{}}}
\subsection{Method \code{wait()}}{
Wait for the run to complete.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$wait(env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{Environment to evaluate tool calls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-await"></a>}}
\if{latex}{\out{\hypertarget{method-Run-await}{}}}
\subsection{Method \code{await()}}{
Perform tool calls asynchronously. Returns a promise.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$await(env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{Environment to evaluate tool calls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-do_tool_calls"></a>}}
\if{latex}{\out{\hypertarget{method-Run-do_tool_calls}{}}}
\subsection{Method \code{do_tool_calls()}}{
Perform tool calls. Returns a list of tool outputs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$do_tool_calls(env = parent.frame())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{Environment to evaluate tool calls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-thread"></a>}}
\if{latex}{\out{\hypertarget{method-Run-thread}{}}}
\subsection{Method \code{thread()}}{
Retrieve the thread of the run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$thread()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-assistant"></a>}}
\if{latex}{\out{\hypertarget{method-Run-assistant}{}}}
\subsection{Method \code{assistant()}}{
Retrieve the assistant of the run.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$assistant()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Run-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Run-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Run$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{openaiapi::Utils} -> \code{\link[openaiapi:Run]{openaiapi::Run}} -> \code{RunStream}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{event_data}}{Data accumulated from the event stream.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RunStream-new}{\code{RunStream$new()}}
\item \href{#method-RunStream-stream_async}{\code{RunStream$stream_async()}}
\item \href{#method-RunStream-clone}{\code{RunStream$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Utils" data-id="store_response"><a href='../../openaiapi/html/Utils.html#method-Utils-store_response'><code>openaiapi::Utils$store_response()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="assistant"><a href='../../openaiapi/html/Run.html#method-Run-assistant'><code>openaiapi::Run$assistant()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="await"><a href='../../openaiapi/html/Run.html#method-Run-await'><code>openaiapi::Run$await()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="cancel"><a href='../../openaiapi/html/Run.html#method-Run-cancel'><code>openaiapi::Run$cancel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="do_tool_calls"><a href='../../openaiapi/html/Run.html#method-Run-do_tool_calls'><code>openaiapi::Run$do_tool_calls()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="list_steps"><a href='../../openaiapi/html/Run.html#method-Run-list_steps'><code>openaiapi::Run$list_steps()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="modify"><a href='../../openaiapi/html/Run.html#method-Run-modify'><code>openaiapi::Run$modify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="retrieve"><a href='../../openaiapi/html/Run.html#method-Run-retrieve'><code>openaiapi::Run$retrieve()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="retrieve_status"><a href='../../openaiapi/html/Run.html#method-Run-retrieve_status'><code>openaiapi::Run$retrieve_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="submit_tool_outputs"><a href='../../openaiapi/html/Run.html#method-Run-submit_tool_outputs'><code>openaiapi::Run$submit_tool_outputs()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="thread"><a href='../../openaiapi/html/Run.html#method-Run-thread'><code>openaiapi::Run$thread()</code></a></span></li>
<li><span class="pkg-link" data-pkg="openaiapi" data-topic="Run" data-id="wait"><a href='../../openaiapi/html/Run.html#method-Run-wait'><code>openaiapi::Run$wait()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunStream-new"></a>}}
\if{latex}{\out{\hypertarget{method-RunStream-new}{}}}
\subsection{Method \code{new()}}{
Initialize a RunStream object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunStream$new(stream_reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{stream_reader}}{StreamReader object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunStream-stream_async"></a>}}
\if{latex}{\out{\hypertarget{method-RunStream-stream_async}{}}}
\subsection{Method \code{stream_async()}}{
Stream the run asynchronously.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunStream$stream_async(
  on_message_delta = function(data) {
 },
  on_message = function(msg) {
 },
  on_run_step_delta = function(data) {
 },
  on_run_step = function(step) {
 },
  on_event = function(event) {
 },
  env = parent.frame()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{on_message_delta}}{A callback function to handle message delta events.}

\item{\code{on_message}}{A callback function to handle all message events.}

\item{\code{on_run_step_delta}}{A callback function to handle run step delta events.}

\item{\code{on_run_step}}{A callback function to handle all run step events.}

\item{\code{on_event}}{A callback function to handle all events.}

\item{\code{env}}{Environment to evaluate tool calls.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RunStream-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RunStream-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RunStream$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
